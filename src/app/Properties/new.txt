/*@use "sass:math"; // Import the math module
@import url(https://fonts.googleapis.com/css?family=Montserrat);
// ------------- MIXINS ------------- //
@mixin transition($time, $property: all, $easing: ease-in) {
    transition: $property $time $easing;
}

// ------------- VARIABLES ------------- //
$parallax-offset: 30vh;
$content-offset: 40vh;
$transition-speed: 1.2s;
$slide-number: 3;

html, body {
  overflow: hidden;
}

.background {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center;
  overflow: hidden;
  will-change: transform;
  backface-visibility: hidden;
  height: calc(100vh + #{$parallax-offset}); // Use calc() for height
  position: absolute;
  width: 100%;
  transform: translateY($parallax-offset);
  @include transition($transition-speed, all, cubic-bezier(0.22, 0.44, 0, 1));
  
  &:before {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0,0,0,.3);
  }

  &:first-child {
    background-image: url(https://i.postimg.cc/kXq9Qmnj/bgd1.jpg);
    transform: translateY(math.div(-$parallax-offset, 2)); // Use math.div()
    .content-wrapper {
      transform: translateY(math.div($parallax-offset, 2)); // Use math.div()
    }
  }

  &:nth-child(2) {
    background-image: url(https://i.postimg.cc/W14vywqg/photo-1424746219973-8fe3bd07d8e3.jpg);
    transform: translateY(math.div(-$parallax-offset, 2)); // Use math.div()
    .content-wrapper {
      transform: translateY(math.div($parallax-offset, 2)); // Use math.div()
    }
  }

  &:nth-child(3) {
    background-image: url(https://i.postimg.cc/TY0xQ41T/photo-1433840496881-cbd845929862.jpg);
    transform: translateY(math.div(-$parallax-offset, 2)); // Use math.div()
    .content-wrapper {
      transform: translateY(math.div($parallax-offset, 2)); // Use math.div()
    }
  }
}

/* Set stacking context of slides */
/*@for $i from 1 to ($slide-number + 1) {
    .background:nth-child(#{$i}) {
        z-index: ($slide-number + 1) - $i; 
    }
}

.content {
  &-wrapper {
    height: 100vh;
    display: flex;
    justify-content: center;
    text-align: center;
    flex-flow: column nowrap;
    color: #fff;
    font-family: Montserrat;
    text-transform: uppercase;
    transform: translateY($content-offset);
    will-change: transform;
    backface-visibility: hidden;
    @include transition($transition-speed + .5, all, cubic-bezier(0.22, 0.44, 0, 1));
  }

  &-title {
    font-size: 12vh;
    line-height: 1.4;
  }
}

// ------------- SET TRANSFORM VALUES ------------- //
.background.up-scroll {
    transform: translate3d(0,-$parallax-offset / 2,0);
    .content-wrapper {
      transform: translateY($parallax-offset / 2);
    }
    + .background {
      transform: translate3d(0,$parallax-offset,0);
        .content-wrapper {
          transform: translateY($parallax-offset);
        }
      }
  }

.background.down-scroll {
  transform: translate3d(0,-(100vh + $parallax-offset),0);
  .content-wrapper {
    transform: translateY($content-offset);
  }
  
  + .background:not(.down-scroll) {
    transform: translate3d(0, math.div(-$parallax-offset, 2), 0); // Use math.div()
    .content-wrapper {
      transform: translateY(math.div($parallax-offset, 2)); // Use math.div()
    }
  }
}*/


<!--<p>Град</p>
<p-dropdown 
[options]="cities" 
[(ngModel)]="selectedCity" 
optionLabel="name" 
[filter]="true" 
[checkmark]="true"
[style]="{ width: '15rem' }" 
 />
<p>Квартал</p>
<p-dropdown 
[options]="neighborhoods" 
[(ngModel)]="selectedNeighborhood"
[checkmark]="true"
optionLabel="neighborhood" 
[filter]="true" 
[style]="{ width: '15rem' }" 
/>
<p>Цена от</p>
<p-inputNumber 
    [(ngModel)]="priceFrom" 
    inputId="locale-user" 
    [minFractionDigits]="2" />
<p>Цена до</p>
<p-inputNumber 
    [(ngModel)]="priceTo" 
    inputId="locale-user" 
   [minFractionDigits]="2" />
<p>
    <p-button label="Търси"  (click)="filter()"/>
</p>
<p>
    <p-button label="Изчисти филтрите"  (click)="clearFilters()"/>
</p>
   <p-dataView #dv [value]="propertiesFilter" [rows]="5" [paginator]="true">
    <ng-template pTemplate="list" let-propertiesFilter>
        <div *ngFor="let item of propertiesFilter">
            <p-card [header]="item.nameProperty" >
                <ng-template pTemplate="header">
                    <img alt="Card" src="http://192.168.247.130:8080/K-Konsult/file/Get/images/{{item.nameProperty}}/{{item.nameProperty}}.png" />
                </ng-template>
                <p>
                    {{item.description}}
                </p>
                <ng-template pTemplate="footer">
                    <div class="flex gap-3 mt-1">
                        <p-button label="Повече информация" [routerLink]="['/PropertyInformation/',  item.nameProperty ]" />
                    </div>
                </ng-template>
            </p-card>
        </div>
        
    </ng-template>
</p-dataView>
<p-scrollPanel [style]="{ width: 'auto', height: '1050px' }">
    <div class="container">
        <section class="background" *ngFor="let slide of slides; let i = index" [ngClass]="{'up-scroll': currentSlideNumber === i - 1, 'down-scroll': currentSlideNumber === i + 1}">
          <div class="content-wrapper">
            <p class="content-title">{{ slide.title }}</p>
            <p class="content-subtitle">{{ slide.subtitle }}</p>
          </div>
        </section>
      </div>

</p-scrollPanel>

<div class="parallax-container">
    <div class="parallax" style="background-image: url('/assets/images/Home/down_image.png');">
      <div class="content">
        <h1>Slide 1</h1>
      </div>
    </div>
    <div class="parallax" style="background-image: url('assets/images/Home/down_image.png');">
      <div class="content">
        <h1>Slide 2</h1>
      </div>
    </div>
    <div class="parallax" style="background-image: url('path/to/your/image3.jpg');">
      <div class="content">
        <h1>Slide 3</h1>
      </div>
    </div>
  </div>

-->



  /*private ticking = false;
  private isFirefox: boolean = /Firefox/i.test(navigator.userAgent);
  private isIe: boolean = (/MSIE/i.test(navigator.userAgent)) || (/Trident.*rv\:11\./i.test(navigator.userAgent));
  private scrollSensitivitySetting: number = 30; // Sensitivity for trackpad gestures
  private slideDurationSetting: number = 600; // Duration to lock slides
  public currentSlideNumber: number = 0;
  public totalSlideNumber: number = 3; // Update this based on the number of slides

  slides = [
    { title: 'Full Page Parallax Effect', subtitle: 'Scroll down and up to see the effect!' },
    { title: 'Cras lacinia non eros nec semper.', subtitle: 'Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.' },
    { title: 'Etiam consequat lectus.', subtitle: 'Nullam tristique urna sed tellus ornare congue.' }
  ];

  @HostListener('wheel', ['$event'])
  onScroll(event: WheelEvent) {
    let delta: number;

    // Use deltaY for modern browsers
    delta = event.deltaY;

    // For Firefox, reverse the delta
    if (this.isFirefox) {
      delta = -delta;
    }

    if (!this.ticking) {
      if (delta <= -this.scrollSensitivitySetting) {
        // Down scroll
        this.ticking = true;
        if (this.currentSlideNumber < this.totalSlideNumber - 1) {
          this.currentSlideNumber++;
          this.nextItem();
        }
        this.slideDurationTimeout(this.slideDurationSetting);
      } else if (delta >= this.scrollSensitivitySetting) {
        // Up scroll
        this.ticking = true;
        if (this.currentSlideNumber > 0) {
          this.currentSlideNumber--;
          this.previousItem();
        }
        this.slideDurationTimeout(this.slideDurationSetting);
      }
    }
  }

  private slideDurationTimeout(slideDuration: number) {
    setTimeout(() => {
      this.ticking = false;
    }, slideDuration);
  }

  private nextItem() {
    if (this.currentSlideNumber < this.totalSlideNumber - 1) {
      this.currentSlideNumber++;
      this.updateSlideClasses(); // Обновяване на класовете на всички слайдове
    }
  }
  
  private previousItem() {
    if (this.currentSlideNumber > 0) {
      this.currentSlideNumber--;
      this.updateSlideClasses(); // Обновяване на класовете на всички слайдове
    }
  }
  
  private updateSlideClasses() {
    const slides = document.querySelectorAll('.background');
  
    slides.forEach((slide, index) => {
      // Премахване на 'up-scroll' и 'down-scroll' от всички слайдове
      slide.classList.remove('up-scroll', 'down-scroll');
  
      // Добавяне на класове на базата на текущия индекс на слайда
      if (index === this.currentSlideNumber - 1) {
        slide.classList.add('up-scroll'); // Предишен слайд
      }
      if (index === this.currentSlideNumber) {
        slide.classList.add('up-scroll'); // Текущ слайд
      }
      if (index === this.currentSlideNumber + 1) {
        slide.classList.add('down-scroll'); // Следващ слайд
      }
    });
  
    // Допълнителна проверка, за да се уверите, че третият слайд е видим
    if (this.currentSlideNumber >= 0 && this.currentSlideNumber <= slides.length) {
      slides[this.currentSlideNumber].classList.add('down-scroll');
    }
  }*/